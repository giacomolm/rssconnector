package Connector;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;


public class Feedback {
	private String description;
	private String author;
	private Title title;
	private Date pubDate;
	private long feedbackName = 0;

	public Feedback(String description, Title title, Date pubDate) {
		super();
		this.description = description;
		this.title = title;
		this.pubDate = pubDate;
	}
	
	public Feedback(String description, Title title, long feedbackname) {
		super();
		this.description = description;
		this.title = title;
		this.setFeedbackname(feedbackname);
	}
	
	

	public void setDescription(String description) {
		this.description = description;
	}

	public String getDescription() {
		return description;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	public String getAuthor() {
		return author;
	}

	public void setTitle(Title title) {
		this.title = title;
	}

	public Title getTitle() {
		return title;
	}

	public void setPubDate(Date pubDate) {
		this.pubDate = pubDate;
	}

	public Date getPubDate() {
		return pubDate;
	}

	public void setFeedbackname(long feedbackname) {
		this.feedbackName = feedbackname;
	}

	public long getFeedbackname() {
		return feedbackName;
	}
	
	@Override
	public String toString() {
		return "Descrizione= "+description+", Titolo= "+title.toString()+", Data di pubblicazione= "+pubDate.toString();
	}
	
	public static Feedback trust(ArrayList<Feedback> feedbacks){
		int [] average = new int[4]; // array contenente 4 contatori, uno per ogni possibile valore di Title
		
		if(feedbacks.isEmpty()) return new Feedback("", null, 0);
		
		// Inizializza un oggetto Feedback con il primo (potenzialmente unico) Feedback presente nella collection
		Feedback fRes = new Feedback("Feedback_autogenerated", 
									feedbacks.get(0).getTitle(), 
									feedbacks.get(0).getFeedbackname()
		);
		
		for(Iterator<Feedback> i = feedbacks.iterator(); i.hasNext();){
			Feedback f = (Feedback) i.next();
			
			//incremento contatori
			if (f.getTitle().equals(Title.AGREE)) average[0]++;
			else if (f.getTitle().equals(Title.PARTIALLY_AGREE)) average[1]++;
			else if (f.getTitle().equals(Title.DISAGREE)) average[2]++;
			else if (f.getTitle().equals(Title.DETRACTOR)) average[3]++;
		}
			int agree = 10;
			int partially_agree= 7;
			int disagree = 4;
			int detractor = 1;
			
			float result = ((average[0] * agree) + (average[1] * partially_agree) + (average[2] * disagree) + (average[3] * detractor)) / (average[0]+average[1]+average[2]+average[3]);
			
			if(result <= 10 && result > 7) fRes.setTitle(Title.AGREE);
			else if(result <= 7 && result > 4) fRes.setTitle(Title.PARTIALLY_AGREE);
			else if(result <= 4 && result > 1) fRes.setTitle(Title.DISAGREE);
			else if(result <= 1 ) fRes.setTitle(Title.DETRACTOR);
			
			
			return fRes;
	}
}


